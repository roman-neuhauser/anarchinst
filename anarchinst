#!/usr/bin/env zsh
# vim: sw=2 sts=2 ts=8 et fdm=marker cms=\ #\ %s

### HELP START # {{{
# NAME
#   $0 - non-interactive installer for ArchLinux
#
# SYNOPSIS
#   $0 --help
#   $0 --example
#   $0 [--immediate] <configfile>
#
# DESCRIPTION
#   $0 is a non-interactive installer for `ArchLinux`_
#   meant to be run from the ArchLinux live DVD.  It is driven by
#   a configuration file using `Zsh`_ syntax.  A commented example
#   configuration is available by running `$0 --example`.
#
#   $0 is suitable for the simple scenario of installing over
#   a single harddisk in either (legacy) BIOS or (modern, cough), UEFI
#   systems.
#
#   When run with a <configfile> argument, $0 will first report
#   the requested and current configuration of the underlying system.
#   If it finds any errors in <configfile> or incompatibilities
#   with the system in question, $0 will abort.
#
#   When the configuration has been validated, $0 will
#   generate `syslinux.cfg` and `doit.zsh`.  Review or even modify
#   contents of either before proceding with `./doit.zsh`.
#   The script will
#
#   * (optionally) overwrite the disklabel on `$disk`
#   * (optionally) create slices in the disklabel
#   * (optionally) create filesystems in the new slices
#   * mount the filesystems under `$destdir`
#   * install `$software` under `$destdir`
#   * configure the tree under `$destdir` for `$hostname`,
#     `$locale`, `$timezone`
#   * unmount the `$destdir` tree
#
#   If all goes well you were lucky and should have an ArchLinux
#   system installed on `$disk`.
#
# .. _`ArchLinux`: https://www.archlinux.org
# .. _`Zsh`: http://zsh.sf.net
#
# Disklabels
#   $0 supports two kinds of disklabels: `gpt` and `msdos`.
#
#   :gpt:
#     Only supported on UEFI systems.  Make sure `$slices`
#     specifies a separate slice for `/boot`, and that it's `fat`;
#     this is the so called ESP, EFI System Partition.
#     $0 installs SYSLINUX under `/boot/EFI/syslinux`.
#
#   :msdos:
#     Supported on both UEFI and BIOS systems.  `/boot` needs not
#     be a separate slice, but SYSLINUX is reported to break btrfs
#     volumes if installed into that.  Other filesystem types should
#     be ok.  $0 installs SYSLINUX under `/boot/syslinux`.
#
#   :keep:
#     Supported on both UEFI and BIOS systems.
#     Keeps existing disklabel, whether it's `gpt` or `msdos`.
#
# OPTIONS
#   -h, --help
#     print this message and exit
#
#   --example
#     print an example configuration and exit
#
#   --immediate
#     run `doit.sh` immediately
#
# ASSUMPTIONS
#   $0 makes several assumptions, make sure they hold before
#   using this tool:
#
#   * you don't mind obliterating the contents of the target device
#   * you want to use Syslinux
#   * the hardware (BIOS) clock is set to UTC
#
# TERMINOLOGY
#   :disklabel:
#     also partition table
#
#   :slice:
#     also partition
#
# ENVIRONMENT
#   $0 itself uses no environment variables.  It is, however,
#   implemented in terms of third-party commands which do use them.
#   This means that $0 may be influenced by environment
#   variables used by the commands listed in the SEE ALSO section,
#   possibly others.
#   When in doubt, try using $0 under `env -i`.
#
# SEE ALSO
#   extlinux(1), syslinux(1), zsh(1), btrfs(8), efibootmgr(8), mkfs(8),
#   mkswap(8), parted(8).
#
# CONFORMING TO
#   Its own whims only.
#
# HISTORY
#   $0 first appeared out of nowhere.
#
# AUTHORS
#   Roman Neuhauser <neuhauser@sigpipe.cz>
#
# BUGS
#   In the best GNU/Linux tradition, $0 has no bugs at all,
#   only incompatible interfaces and conflicting implementations.
#   If it breaks you can keep the pieces.
#
#   Support for reusing existing slices or coexistence with other
#   installations on the same drive needs more testing.
#
#   Networking setup is nonexistent.  The ArchLinux live media
#   configures all devices formerly known as `ethX` for DHCP,
#   so this works without any user intervention.  For wireless,
#   `wifi-menu` WORKSFORME.
#
#   Networking setup in the target system is also still coming.
#   systemd-networkd(8) / wpa_supplicant(8) combination seems to
#   be okayish for a laptop (though i'm getting major suckage from
#   systemd-resolved after resuming the machine in the same wifi
#   network it went to sleep in: /run/systemd/resolve/resolv.conf
#   gets reset to some default state with Google-operated (!!!)
#   name servers).
#
#   Patches are welcome at
#   <https://github.com/roman-neuhauser/anarchinst/>.
### HELP END # }}}

### EXAMPLE START # {{{
# # hostname for the target system, fully qualified
# hostname=wrench.sigpipe.cz
#
# # locale used by the target system
# # for possible values see /etc/locale.gen
# locale='en_US.UTF-8 UTF-8'
#
# # timezone used by the target system
# # for possible values see /usr/share/zoneinfo/
# timezone=Europe/Prague
#
# # device on the receiving end of the installer
# # current limitation: neither syslinux.cfg nor
# # fstab use uuids
# disk=/dev/sda
#
# # partition table type
# # possible values: gpt, msdos, keep
# # 'gpt', 'msdos' cause a new disklabel of the appropriate
# # type to be created on $disk
# # 'keep' keeps the disklabel already found on $disk
# disklabel=gpt
#
# # slice, filesystem, mountpoint specifications
# # each slice is a string of colon-separated atoms:
# # - mountpoint (empty = "don't mount", think swap)
# # - slice name (gpt-only)
# # - slice size (unit = MiB)
# # - filesystem (btrfs, ext{2,3,4}, fat)
# # - create the partition? (y/n)
# # - run mkfs? (y/n)
# # - slice flags (see parted(8))
# slices=(
#   /boot:toob:512:fat:y:y:boot,legacy_boot
#   :paws:10240:swap:y:y
#   /:toor:-:btrfs:y:y
# )
#
# # to keep your gpt disklabel and reformat everything
# # but the 100G /home slice:
# # disklabel=keep
# # slices=(
# #   /boot:toob:512:fat:y:y:boot
# #   :paws:10240:swap:y:y
# #   /home:home:1024000:btrfs:n:n
# #   /:toor:-:btrfs:y:y
# # )
#
# # target filesystems will be mounted under this directory
# # during installation
# # optional, defaults to the result of `mktemp -d`
# #destdir=/mnt
#
# # pacman(8) repositories
# std_repos=(
#   core
#   extra
#   community
# )
# custom_repos=(
#   obs-home
#   '[home_roman-neuhauser_Arch_Extra]
#     SigLevel = Never
#     Server = http://download.opensuse.org/repositories/home:/roman-neuhauser/Arch_Extra/$arch
#   '
#   opensuse-tools
#   '[openSUSE_Tools_Arch_Extra]
#     SigLevel = Never
#     Server = http://download.opensuse.org/repositories/openSUSE:/Tools/Arch_Extra/$arch
#   '
# )
#
# # an array of pacman(8) "targets" (packages and groups)
# #
# # this particular selection reflects choices and occupations
# # of anarchinst's author: this is what i have on my laptop.
# software=(
# # absolute basics
#   base # expected everywhere
#   parted
#   btrfs-progs # required for btrfs
#   syslinux # used by $0
#   efibootmgr efivar # required for EFI
#   tcpdump
#
# # FIXME: intel-cpu specific
#   intel-ucode
#
# # wifi
#   wpa_supplicant
#
# # still basics
#   apg
#   nfs-utils
#   openssh openvpn
#   openbsd-netcat # also optional for libvirt
#   vim tmux zsh
#   htop lsof strace
#   multitail
#
# # useful
#   p7zip pkgfile
#
# # command line tools for ftp, http, email, etc
#   aria2 curl rsync rtorrent w3m wget
#   getmail irssi mutt
#
# # SCM and related
#   git tig mercurial bzr subversion
#
# # programming
#   base-devel # auto{conf,make} binutils bison gcc libtool make etc
#   autoconf-archive
#   cmake scons tup
#   swig
#   clang llvm
#   dash mksh tcsh
#   cscope ctags
#   ddd gdb pydb valgrind
#   boost{,-libs}
#
# # yast programming
#   dejagnu doxygen
#
# # interpreters
#   nodejs
#   ipython{,2}
#   python{,2} pypy{,3} cython{,2} python{,2}-pip
#   python{,2}-docutils
#   ruby{,-docs}
#
# # virtualization
#   dnsmasq libvirt qemu
#
# # openSUSE packaging
#   # osc comes from openSUSE:Tools in OBS
#   # rpm-org (normally in AUR) comes from home:roman-neuhauser in OBS
#   osc
#   rpm-org # unexpressed dependency of osc
#
# # audio
#   pulseaudio{,-alsa} ponymix
#   xmms2
#
# # image viewer
#   qiv
#
# # PDF and PostScript viewer
#   zathura-{djvu,pdf-mupdf,ps}
#
# # browser
#   firefox flashplugin
#
# # better tcpdump
#   wireshark-{cli,gtk}
#
# # window manager + terminal
#   i3-wm i3lock i3status
#   rxvt-unicode
#
# # X server + basic tools
#   xf86-input-{evdev,keyboard,mouse,synaptics,vmmouse,void}
#   xf86-video-{fbdev,intel,vesa}
#   xorg-server{,-common}
#   xorg-{setxkbmap,xkbcomp,xkbevd,xkbutils}
#   xorg-{xdpyinfo,xdriinfo,xev,xwd}
#   xorg-{xinit,xinput,xmodmap,xrandr,xrdb}
#   xorg-{xset,xsetroot}
#   xsel
# )
### EXAMPLE END # }}}

### SYSLINUX.CFG START # {{{
# UI menu.c32
#
# MENU COLOR screen       0;37;40
# MENU COLOR border       0;30
# MENU COLOR title        0;30;43
# MENU COLOR sel          0;30;47
# MENU COLOR unsel        0;37;40
# MENU COLOR tabmsg       0;33
#
# MENU TITLE ${hostname}
#
# DEFAULT arch
# TIMEOUT 30
#
# LABEL arch
#     MENU LABEL Arch Linux
#     LINUX /vmlinuz-linux
#     APPEND root=${rootdev} rw
#     INITRD /intel-ucode.img,/initramfs-linux.img
#
# LABEL archfallback
#     MENU LABEL Arch Linux Fallback
#     LINUX /vmlinuz-linux
#     APPEND root=${rootdev} rw
#     INITRD /initramfs-linux-fallback.img
#
# LABEL hdt
#         MENU LABEL HDT (Hardware Detection Tool)
#         COM32 hdt.c32
#
# LABEL reboot
#         MENU LABEL Reboot
#         COM32 reboot.c32
#
# LABEL poweroff
#         MENU LABEL Poweroff
#         COM32 poweroff.c32
### SYSLINUX.CFG END # }}}

_SELF=${0:t}
_ABS0=$0

record() # {{{
{
  print -u $tape -- "$@"
} # }}}

read_current_disklabel() # {{{
{
  local disk=${1?}
  # parted -m prints "BYT;" on the first line
  sudo parted -ms -- $disk unit MiB print \
  | sed -n '2,$ { s/MiB//g; p; }'
} # }}}

setup_disk() # {{{
{
  : ${disk?} ${disklabel?} ${keep_disklabel?}

  if [[ $keep_disklabel == 0 ]]; then
    record parted -ms -- \$disk mklabel $disklabel
  fi

  local -a parts
  local -i start=0 end=0 partno=0
  local spec mp name fs newfs flags
  local flag
  for spec in "${(@)slices}"; do
  for mp name size fs mkpart newfs flags in "${(@s.:.)spec}"; do
    (( start = end + 1 ))
    if [[ $size = - ]]; then
      (( end = -1 ))
    else
      (( end = start + size ))
    fi
    (( partno += 1 ))
    if [[ $mkpart == y ]]; then
      record parted -ms -- \$disk unit MiB mkpart primary $start $end
    fi
    if [[ $disklabel == gpt ]]; then
      record parted -ms -- \$disk name $partno $name
    fi
    for flag in ${(s:,:)flags}; do
      record parted -ms -- \$disk set $partno $flag on
    done
  done
  done
  record parted -s \$disk print

  partno=0
  for spec in "${(@)slices}"; do
  for mp name size fs mkpart newfs flags in "${(@s.:.)spec}"; do
    (( partno += 1 ))
    [[ $newfs = y ]] || continue
    mkfs_ $disk $partno $fs $name
  done
  done
} # }}}
mkfs_() # {{{
{
  local disk=${1?} partno=${2?} fs=${3?} name=${4?}
  local dev='${disk}'$partno opts=
  case $fs in
  "")
    return 0 ;;
  swap)
    record mkswap $dev
    return $? ;;
  btrfs)
    opts="-f ${name:+-L$name}"
  esac
  record mkfs -t $fs ${=opts} $dev
} # }}}
attach_disk() # {{{
{
  local -i partno=0
  local spec mp
  local -a parts mounts
  for spec in "${(@)slices}"; do
    (( partno += 1 ))
    parts=("${(@s.:.)spec}")
    mp=$parts[1]
    [[ -z $mp ]] && continue
    mounts[partno]=$mp:$partno
  done
  for spec in ${(o)mounts[@]}; do
    mp=${spec%:*}
    partno=${spec#*:}
    record mkdir -p \$destdir$mp
    record mount '${disk}'$partno \$destdir$mp
  done
} # }}}
setup_pkg_repos() # {{{
{
  local repo file contents
  local -a repofiles
  local -r pacmand=/etc/pacman.d
  for repo in $std_repos; do
    file=$repo.repo
    print >$file -f '%s\n' \
      "[$repo]" \
      "Include = $pacmand/mirrorlist"
    repofiles+=($file)
  done
  for repo contents in "${(@)custom_repos}"; do
    file=$repo.repo
    cat > $file <<<"$contents"
    repofiles+=($file)
  done

  record \# pacman-key --refresh-keys
  record mkdir -p \$destdir$pacmand
  for file in $repofiles; do
    record cp \${_ABS0:h}/$file \$destdir$pacmand/$file
  done
  for file in $repofiles; do
    record print "Include = $pacmand/$file" '>>' \$destdir/etc/pacman.conf
  done
} # }}}
install_packages() # {{{
{
  record pacstrap \$destdir ${=software:-base syslinux}
} # }}}
find_partition() # {{{
{
  local mp=${1?} spec
  local -i i=0
  for spec in "${(@)slices}"; do
    (( i += 1 ))
    if [[ $mp = ${spec%%:*} ]]; then
      print $i
      return
    fi
  done
  return 1
} # }}}
setup_syslinux() # {{{
{
  if [[ ! -e syslinux.cfg ]]; then
    generate_syslinux_cfg > syslinux.cfg
  fi

  local -r sysli=$(
    case $disklabel in
    (gpt) print /boot/EFI/syslinux ;;
    (msdos) print /boot/syslinux ;;
    esac
  )

  record mkdir -p \$destdir$sysli
  record cp \${_ABS0:h}/syslinux.cfg \$destdir$sysli/
  case $disklabel in
  gpt) setup_syslinux_gpt ;;
  msdos) setup_syslinux_msdos ;;
  esac
} # }}}
setup_syslinux_gpt() # {{{
{
  record cp -r \$destdir/usr/lib/syslinux/efi64/\* \$destdir$sysli
  record efibootmgr --create \
    --disk \$disk \
    --part "$(find_partition /boot)" \
    --loader ${sysli#/boot}/syslinux.efi \
    --label ${sysli:t}
} # }}}
setup_syslinux_msdos() # {{{
{
  record cp -r \$destdir/usr/lib/syslinux/bios/\* \$destdir$sysli
  record arch-chroot \$destdir extlinux --install $sysli
} # }}}
generate_syslinux_cfg() # {{{
{
  local rootdev="$disk$(find_partition /)"
  print_section SYSLINUX.CFG \
  | sed -re 's,\$\{hostname\},'$hostname, \
         -e 's,\$\{rootdev\},'$rootdev,
} # }}}
finalize() # {{{
{
  record genfstab -U -p \$destdir '>>' \$destdir/etc/fstab

  record sed -ne '/^#[^[:space:]]/s/^#//p' -i \$destdir/etc/locale.gen

  record arch-chroot \$destdir hwclock --systohc --utc
  record arch-chroot \$destdir locale-gen

  record systemd-firstboot --root=\$destdir \
    --hostname=\$hostname \
    --locale=\$locale \
    --timezone=$timezone
} # }}}
detach_disk() # {{{
{
  record umount -R \$destdir '||' fuser -Mm \$destdir
} # }}}
cleanup() # {{{
{
  say ABORT >&2
  detach_disk
  exit ${1:-1}
} # }}}
ask() # {{{
{
  local question=${1?} replyp=${2?} reply=n
  local rv=1
  while :; do
    printf "$_SELF: %s [y/n] " $question
    read reply; rv=$?
    case $reply in
    [Yy]) reply=y ;;
    [Nn]) reply=n ;;
    *) continue ;;
    esac
    break
  done
  eval ${replyp}=$reply
  if [[ $rv -gt 0 ]]; then
    eval ${replyp}=n
  fi
  return $rv
} # }}}
abort() # {{{
{
  local -i ex=$1; shift
  say "$@" >&2
  exit $ex
} # }}}
say() # {{{
{
  printf "$_SELF: %s\n" "$@"
} # }}}
debuglog() # {{{
{
  print "$@"
} >&2 # }}}

print_usage() # {{{
{
  local synopsis="$(
    print_section HELP \
    | sed -n '
      /SYNOPSIS/ {
        n
        s/^ *//
        p
        q
      }'
  )"
  say "usage: $synopsis" >&2
} # }}}

print_section() # {{{
{
  local -r s="${1?}"
  sed -rnf - ${_ABS0?} <<EOSED
    /^### $s START/,/^### $s END/ {
      s/\\\$0/$_SELF/
      s/^#( |\$)//p
    }
EOSED
} # }}}
print_help() # {{{
{
  print_section HELP | $PAGER
} # }}}
print_example() # {{{
{
  print_section EXAMPLE | $PAGER
} # }}}
print_readme() # {{{
{
  print '.. vim: ft=rst sts=2 sw=2 tw=82'
  print '.. default-role:: literal'
  print
  print_section HELP \
  | sed -re '
      /^NAME/,+1 {
        s/anarchinst/**&**/
        s/ArchLinux/**&**/
      }

      /^SYNOPSIS/ {
        a\

        a\
::\

      }

      /^DESCRIPTION/,$ {
        s/(^| )(anarchinst)\>/ *\2*/g
        s/<configfile>/`&`/g
      }

      s/^[[:upper:]].*$/**&**/
    '
} # }}}

yesno() # {{{
{
  if [[ ${1?} -eq 0 ]]; then
    print yes
  else
    print no
  fi
} # }}}
report() # {{{
{
  local cfgfmt=' %-14s : %s\n'
  local slicefmt=' %-10s %-8s %-5s %-8s %s\n'

  print requested configuration
  printf $cfgfmt \
    hostname $hostname \
    timezone $timezone \
    'target device' $disk \
    disklabel $disklabel \

  local -i i=0
  printf ' slices:\n'
  printf " %3s $slicefmt" nr mountpoint fs newfs size flags
  for spec in "${(@)slices}"; do
  print "${(@s.:.q-)spec}" | read mp name size fs newfs flags
    printf " %3d $slicefmt" $((++i)) "${${(Q)mp}:--}" "$fs" "$newfs" "$size" "$flags"
  done
  print

  print current setup
  printf $cfgfmt \
    UEFI-enabled $(mountpoint -q $efivarsp; yesno $?) \
    disklabel $currdltype

  printf ' slices:\n'
  printf " %3s $slicefmt" nr mountpoint fs newfs size flags
  for spec in "${(@)${(f)currdisklabel}[2,-1]}"; do
    print "${(@s.:.q-)spec}" | read i start end size fs unused flags
    fs="${(Q)fs}"
    fs="${${${fs:-unknown}:#linux-swap*}:-swap}"
    flags="${${(Q)flags}%;}"
    flags="${(j:,:)${(@s:, :)flags}}"
    printf " %3d $slicefmt" $i - "$fs" - "$size" "$flags"
  done
  print
} # }}}

local -a slices
local currdisklabel
local -r efivarsp=/sys/firmware/efi/efivars

if [[ $# -eq 0 ]]; then
  print_usage
  exit 1
fi

: ${PAGER:=less}

if [[ $1 == -h || $1 == --help ]]; then
  print_help
  exit 0
fi

if [[ $1 == --readme ]]; then
  print_readme
  exit 0
fi

if [[ $1 == --example ]]; then
  print_example
  exit 0
fi

local -i o_syslinux=0
if [[ $1 == --syslinux ]]; then
  o_syslinux=1
  shift
fi

local -i o_immediate=0
if [[ $1 == --immediate ]]; then
  o_immediate=1
  shift
fi

local -r configfile=${1?}
source $configfile

: ${disk:?}
: ${disklabel:?}
: ${slices:?}
: ${hostname:?}
: ${timezone:?}
: ${destdir:='$(mktemp -d)'}
: ${destdir:?}
: ${currdisklabel:="$(read_current_disklabel $disk)"}
: ${currdisklabel:?}

if (( o_syslinux )); then
  generate_syslinux_cfg
  exit 0
fi

local -r diskinfo="${${(f)currdisklabel}[1]}"
local -r currdltype="${${(@s.:.)diskinfo}[6]}"

local -r tzfile=/usr/share/zoneinfo/$timezone

report

keep_disklabel=0

case $disklabel in
keep)
  disklabel=$currdltype
  keep_disklabel=1
  ;;
esac

case $disklabel in
gpt)
  if ! mountpoint -q $efivarsp; then
    abort 1 "disklabel=gpt requires a UEFI-enabled system"
  fi
  ;;
msdos)
  ;;
*)
  abort 1 "unsupported value disklabel=$disklabel"
  ;;
esac

if [[ ! -e $tzfile ]]; then
  abort 1 "timezone file $tzfile not found"
fi

declare -i tape
local -r script=./doit.zsh

exec {tape} > $script
record '#!/usr/bin/env zsh'

record set -o errexit
record set -o nounset

record local -r _ABS0=\${0:h}/$script
record local -r disk=$disk
record local -r destdir=$destdir
record local -r hostname=$hostname
record local -r locale=${(q-)locale}

setup_disk

trap 'cleanup 2' HUP INT TERM

   attach_disk \
&& setup_pkg_repos \
&& install_packages \
&& setup_syslinux \
&& finalize

detach_disk

exec {tape} >&-
chmod u+x $script

if (( o_immediate )); then
  $script || exit $?
else
  say "generated syslinux.cfg"
  say "generated doit.zsh"
fi

say done
